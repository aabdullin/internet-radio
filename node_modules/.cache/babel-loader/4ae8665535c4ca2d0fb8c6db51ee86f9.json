{"ast":null,"code":"var _jsxFileName = \"/Users/artur/Documents/GitHub/pure-react/hooks_exercises/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CountingParent extends React.Component {\n  // The constructor is called when a\n  // component is created\n  constructor(props) {\n    super(props); // Set the state here. Use \"props\" if needed.\n\n    this.state = {\n      actionCount: 0\n    }; // Bind the event handler function, so that its // `this` binding isn't lost when it gets passed // to the button\n\n    this.handleAction = this.handleAction.bind(this);\n  }\n\n  handleAction(action) {\n    console.log('Child says', action); // Replace actionCount with an incremented value this.setState({\n\n    this.setState = this.state.actionCount + 1;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Child, {\n        onAction: this.handleAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Clicked \", this.state.actionCount, \" times\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 51\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nfunction Child({\n  onAction\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: onAction,\n    children: \"Click Me!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Child;\nReactDOM.render( /*#__PURE__*/_jsxDEV(CountingParent, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 43,\n  columnNumber: 5\n}, this), document.querySelector('#root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Child\");","map":{"version":3,"sources":["/Users/artur/Documents/GitHub/pure-react/hooks_exercises/src/index.js"],"names":["React","ReactDOM","CountingParent","Component","constructor","props","state","actionCount","handleAction","bind","action","console","log","setState","render","Child","onAction","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAO,uCAAP;;;AAIA,MAAMC,cAAN,SAA6BF,KAAK,CAACG,SAAnC,CAA6C;AAAE;AAC3C;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEX;;AACJ,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAb,CAHe,CAMf;;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACH;;AACDD,EAAAA,YAAY,CAACE,MAAD,EAAS;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B,EADiB,CAEjB;;AACA,SAAKG,QAAL,GAAgB,KAAKP,KAAL,CAAWC,WAAX,GAAyB,CAAzC;AACH;;AAEDO,EAAAA,MAAM,GAAG;AAAE,wBACP;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAE,KAAKN;AAAtB;AAAA;AAAA;AAAA;AAAA,cADJ,oBAC0C;AAAA,+BAAY,KAAKF,KAAL,CAAWC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAD1C;AAAA;AAAA;AAAA;AAAA;AAAA,YADO;AAKV;;AAtBwC;;AA0B7C,SAASQ,KAAT,CAAe;AAAEC,EAAAA;AAAF,CAAf,EAA6B;AACzB,sBACA;AAAQ,IAAA,OAAO,EAAEA,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAIA;;KALKD,K;AAQTd,QAAQ,CAACa,MAAT,eACI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EAEIG,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFJ","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'font-awesome/css/font-awesome.min.css';\n\n\n\nclass CountingParent extends React.Component { // The constructor is called when a\n    // component is created\n    constructor(props) {\n        super(props);\n            // Set the state here. Use \"props\" if needed.\n        this.state = { \n            actionCount: 0\n        };\n        // Bind the event handler function, so that its // `this` binding isn't lost when it gets passed // to the button\n        this.handleAction = this.handleAction.bind(this);\n    }\n    handleAction(action) {\n        console.log('Child says', action);\n        // Replace actionCount with an incremented value this.setState({\n        this.setState = this.state.actionCount + 1 \n    };\n\n    render() { return (\n        <div>\n            <Child onAction={this.handleAction}/> <p>Clicked {this.state.actionCount} times</p>\n        </div>\n        ); \n    }\n}    \n\n\nfunction Child({ onAction }) { \n    return (\n    <button onClick={onAction}> \n        Click Me!\n    </button>\n); }\n\n\nReactDOM.render( \n    <CountingParent/>, \n    document.querySelector('#root')\n)\n\n"]},"metadata":{},"sourceType":"module"}